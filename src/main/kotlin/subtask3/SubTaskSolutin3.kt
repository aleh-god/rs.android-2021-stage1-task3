package subtask3

fun main(args: Array<String>){
    var result: Array<String>? = null

    result = findAllNumbersFromGivenNumber("5")

    for (i in result!!) {
        println(i)
    }

    println("2")

    result = findAllNumbersFromGivenNumber("8675309")
    result?.forEach { print("$it ") }

    println("3")

    result = findAllNumbersFromGivenNumber("-634756385")
    if (result != null) {
        result.forEach { print("$it ") }
    } else println("null result")
}

fun findAllNumbersFromGivenNumber(number: String): Array<String>? {

    var result: Array<String>? = null
    val charForChange = mapOf(
        '0' to listOf('8'),
        '1' to listOf('2', '4'),
        '2' to listOf('1', '3', '5'),
        '3' to listOf('2', '6'),
        '4' to listOf('1', '5', '7'),
        '5' to listOf('2', '4', '6', '8'),
        '6' to listOf('3', '5', '9'),
        '7' to listOf('4', '8'),
        '8' to listOf('0', '5', '7', '9'),
        '9' to listOf('6', '8')
    )

    val resultList = mutableListOf<String>()

    val checkInt: Int? = number.toIntOrNull()

    if (checkInt != null) {
        if (checkInt > 0) {

            val numberArray = number.toMutableList()
            println("numberArray input: $numberArray")

            for (i in 0..numberArray.lastIndex) {

                val x = numberArray[i]
                val temp: List<Char>? = charForChange[x]
                println("point: $x List: $temp")

                for (j in temp!!) {
                    numberArray[i] = j
                    resultList.add(String(numberArray.toCharArray()))
                }
                numberArray[i] = x
            }
            result = resultList.toTypedArray()
        }
    }

    return result
}

/*

3) Телефонный искатель
Начатая в 2008 году и недавно набравшая популярность, игра, известная как Number Neighbor или Text Door Neighbor,
предлагает пользователям отправлять текстовые сообщения на номера телефонов, расположенные рядом с их собственным.

Традиционно это делалось для чисел ± 1, поэтому у человека с номером телефона 555-555-5555 есть соседи 555-555-5554 и 555-555-5556.

Мы собираемся пойти дальше и подумать о соседях на основе классической телефонной клавиатуры.

Во-первых, давайте взглянем на классическую клавиатуру телефона:

клавиатура телефона

Мы можем считать определенные числа смежными, если они расположены непосредственно рядом или выше / ниже друг друга.
Например, 1 находится рядом с 2 и 4 (и ни с чем другим), а 5 находится рядом с 2, 4, 6 и 8.

Давайте поищем телефонные номера, которые являются «соседями» данного телефонного номера, если любая (и только одна)
из их цифр будет отличаться друг от друга в качестве номера, смежного с исходным.

Согласно этому определению, 555-555-5555 имеет как своих первоначальных соседей, так и, например, 554-555-5555 и 555-555-5558.

Проблема

Учитывая телефонный номер строки из целых чисел длиной N (1 ≤ N ≤ 10) в виде числовой строки (например, 555-555-5555
будет передан как «5555555555»), верните массив всех телефонных номеров в виде числовых строк, которые будут считается соседями этого номера телефона.

Примеры

Учитывая "1", возвращается ["2", "4"]

Если задано «8675309», возвращается [«5675309», «7675309», «9675309», «0675309», «8375309», «8575309», «8975309», «8645309», «8685309», «8672309», «8674309», «8676309», «8678309», «8675209», «8675609», «8675389», «8675306», «8675308»]

Заметки

Не оборачивайте клавиатуру стороной при нахождении соседних цифр. То есть не считайте 6 смежными с 4 или 0 смежными с 2.

Не считайте числа, диагональные друг к другу, смежными. Если входной номер отрицательный, верните ноль.

Не беспокойтесь о порядке числовых строк в возвращаемом массиве.

 */